Problem sheet week 7

1. Suppose you implement the functionality of a priority queue using a sorted array (e.g. from
biggest to smallest). What is the worst case running time of insert and extract-min respectively?
(Assume that you have a large enough array to accommodate the insertions that you face)

To insert the worst case is that you insert the min value and have to move it to the root, e.g. over
log(n) levels
To extract the worst case is constant time as you always take the root

=> Theta(log(n)) and Theta(1)
=> Wrong because the question states that its from biggest to smallest therefore you have linear
time to extract the min
=> Theta(n) and Theta(n)
=> Wrong.
=> Theta(n) and Theta(1) as you have to scan the entire array to find the correct location to
insert, but you know the element you want is the last one (I think I have gotten confused between
priority queue and a heap in this question)


2. Suppose you implement the functionality of a priority queue on an unsorted array. What is the
worst case running time of insert and extract-min, respectively? (Assume that you have a large
enough array to accommodate the insertion that you face)

To insert the worst case is constant time as you can just insert at the end of the array
To extract the worst case is linear time as you have to scan the entire array to get the min

=> Theta(1) and Theta(n)
=> Correct


3. You are given a heap with n elements that supports Insert and Extract-Min. Which of the following
tasks can you achieve in O(log(n)) time?

* Find the fifth-smallest element stored in the heap
This would be constant time as you would just extract-min 5 times, which is a constant time
operation
* Find the largest element stored in the heap
This would be a linear time as you would need to extract-min the entire length of the array (heap)
* Find the median of the elements stored in the heap
This would be a linear time (n/2) as you would need to extract-min half of the array

=> None of these
=> Incorrect
=> Find the 5th smallest as constant time is faster?
=> Correct


4. You are given a binary tree (via a pointer to its root) with n nodes. As in lecture, let size(x)
denote the number of nodes in the subtree at the node x. How much time is necessary and sufficient
to compute size(x) for every node n of the tree?

You would need to eventually go the entire depth of the tree to see how many nodes there were
=> Theta(height)

=> Incorrect - How many distinct quantities are you responsible for computing?
=> Theta(nlog(n) as you need to scan each node over each level
=> Incorrect - Can you do better
=> Theta(n)


5. Suppose we relax the third invariant of red-black trees to the property that there are no three
reds in a row. That is, if a node and its parent are both red, then both of its children must be
black. Call these relaxed red-black trees. Which of the following statements is not true?

* Every red-black tree is also a relaxed red-black tree
This is true because the relaxed rule is less strict than the normal third invariant
* Every binary search tree can be turned into a relaxed red-black tree via some colouring of the
nodes are red or black
This is false because one long chain down the left with the correct colours would break the fourth
invariant
* The height of every relaxed red-black tree with n nodes is O(log(n))
True, this needs to be true to follow the fourth invariant
* There is a relaxed red-black tree that is not also a red-black tree
True, any relaxed tree using the relaxed third invariant fits this scenario

=> Correct. A chain with four nodes is a counterexample.
