Problem Set 8

1. Which of the following is not a property that you expect a well-designed hash function to have?

* The hash function should be easy to store (constant space or close to it)
Yes because otherwise the lookup and store functions would take too long

* The has function should "spread out" most (i.e. "non-pathological") data sets (across the
buckets/slots of the hash table)
Yes otherwise you will end up with collisions which will worsen the running time of the hash
functions

* The hash function should "spread out" every data set (across buckets/slots of the hash table)
No because every hash function will have one set of data which will "break" it and map to the same
bucket (even if this set is not reasonable to calculate such as when using cryptographic hashing
functions)

* The hash function should be easy to compute (constant time or close to it)
Yes because otherwise the lookup and store functions would take too long

Correct -> As discussed in the lecture, unfortunately there is no such hash function


2. Suppose we use a hash function h to hash n distinct keys into an array T of length m. Assuming
simple uniform hashing --- that is, with each key mapped independently and uniformly to a random
bucket --- what is the expected number of keys that get mapped to the first bucket. More precisely,
what is the expected cardinality of the set {k : h(k) = 1}

If there are 4 distinct keys and 2 buckets then its 1/2 likely for each one to go in one or the
other => 2 in the first bucket
=> n/m

Correct - Use linearity of expectation, with one indicator variable for each key. The probability
that one key hashes to the first bucket is 1/m, and by linearity of expectation the total expected
number of keys that hash to the first bucket is just n/m.


3. Suppose we use a hash function h to hash n distinct keys into an array T of length m. Say that
two distinct keys x,y collide under h if h(x)=h(y). Assuming simple uniform hashing --- that is,
with each key mapped independently and uniformly to a random bucket --- what is the probability that
a given pair x,y distinct keys collide?

For set n=4
m = 2
== 0.5 * 0.5 = 0.25

for set n=4
m = 4
0.25 * 0.25 = 0.125

=> 1/m^2

Incorrect - This is the probability that x,y collide in a given bucket (e.g. that h(x)=h(y)=1). But
what if they collide in some other bucket?


4. Suppose we use a hash function h to hash n distinct keys into an array T of length m. Assuming
simple uniform hashing --- that is, with each key mapped independently and uniformly to a random
bucket --- what is the expected number of pairs of distinct keys that collide (As above, distinct
keys x,y are said to collide if h(x)=h(y))

For set n=4, m=2
== 2

For set n=4,m=4
== 0

=> n(n-1)/2m

Correct - There are nC2 (i.e. n(n-1)/2) pairs of distinct keys. By the previous problem, each pair
has a 1/m chance of colliding. The answer now follows from the linearity of expectation


5. To interpret our heuristic analysis of bloom filters in lecture, we considered the case where we
were willing to use 8 bits of space per object in the bloom filter. Suppose we were willing to use
twice as much space (16 bits per object). What can you say about the corresponding false positive
rate, according to our heuristic analysis (assuming that the number k of hash tables is set
optimally?) [Choose the strongest true statement]

Less than .1%
Correct
